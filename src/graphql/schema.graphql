# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  address: String!
  city: String!
  contactName: String!
  contactPhone: String!
  country: String!
  name: String!
  postalCode: String!
  region: String!
}

input AddressInput {
  address: String!
  city: String!
  contactName: String!
  contactPhone: String!
  country: String!
  name: String!
  postalCode: String!
  region: String!
}

type CartItem {
  product: Product!
  quantity: Int!
}

input CartItemInput {
  product: ObjectId!
  quantity: Int!
}

type Category {
  _id: ObjectId!
  description: String
  name: String!
  picture: String
}

type Coupon {
  code: String!
  description: String
  discount: Int!
  expirationDate: Date
  invalidCategories: [Category!]
  isPublic: Boolean
  limit: Int
  onlyForOwnerProducts: Boolean
  owner: User!
  status: CouponStatus
  validCategories: [Category!]
}

"""Sets the current status of a coupon"""
enum CouponStatus {
  ACTIVE
  EXPIRED
  REDEEMED_OUT
  SUSPEND
}

input CreateCategoryInput {
  description: String
  name: String!
  picture: String
}

input CreateCouponInput {
  code: String!
  description: String
  discount: Int!
  expirationDate: Date
  invalidCategories: [ObjectId!]
  isPublic: Boolean
  limit: Int
  onlyForOwnerProducts: Boolean
  owner: ObjectId!
  status: CouponStatus
  validCategories: [ObjectId!]
}

input CreateOrderDetailsInput {
  discount: Int
  product: ProductDetailsInput!
  quantity: Int!
  unitPrice: Float!
}

input CreateOrderInput {
  coupon: String
  couponDiscount: Int
  details: [CreateOrderDetailsInput!]!
  owner: ObjectId!
  shipAddress: AddressInput!
}

input CreateProductInput {
  category: ObjectId!
  condition: ProductCondition!
  description: String!
  images: String!
  name: String!
  owner: ObjectId!
  price: Float!
  stock: Float!
}

input CreateSaleInput {
  customer: ObjectId!
  details: [CreateOrderDetailsInput!]!
  order: ObjectId!
  owner: ObjectId!
  shipAddress: AddressInput!
}

input CreateUserInput {
  email: String!
  fullName: String!
  password: String!
  username: String!
}

"""Date custom scalar type"""
scalar Date

input FilterInput {
  category: String
  condition: [ProductCondition!]
  priceRange: PriceFilterInput
}

type InfiniteScrollProducts {
  hasMore: Boolean!
  products: [Product!]!
}

input LogInInput {
  password: String!
  username: String!
}

type Mutation {
  addProductToCart(productCartDetails: CartItemInput!, userId: ObjectId!): [CartItem!]!
  addUserAddress(userAddressDetails: AddressInput!, userId: ObjectId!): User!
  createCategory(categoryData: CreateCategoryInput!): Category!
  createCoupon(couponData: CreateCouponInput!): Coupon!
  createOrder(orderData: CreateOrderInput!): Order!
  createProduct(productData: CreateProductInput!): Product!
  createSale(saleData: CreateSaleInput!): Sale!
  createUser(userData: CreateUserInput!): User!
  decreaseProductQuantityFromCart(productCartDetails: CartItemInput!, userId: ObjectId!): [CartItem!]!
  deleteCategory(categoryId: ObjectId!): Category!
  deleteCoupon(couponId: ObjectId!): Coupon!
  deleteOrder(orderId: ObjectId!): Order!
  deleteProduct(productId: ObjectId!): Product!
  deleteProductFromCart(productId: ObjectId!, userId: ObjectId!): [CartItem!]!
  deleteSale(saleId: ObjectId!): Sale!
  deleteUser(userId: ObjectId!): User!
  logIn(userData: LogInInput!): TokenWithUser!
  logout: User!
  signUp(userData: SignUpInput!): TokenWithUser!
  updateCategory(categoryData: UpdateCategoryInput!, categoryId: ObjectId!): Category!
  updateCoupon(couponData: UpdateCouponInput!, couponId: ObjectId!): Coupon!
  updateProduct(productData: UpdateProductInput!, productId: ObjectId!): Product!
  updateSaleStatus(saleId: ObjectId!, status: UpdateSaleStatusInput!): Sale!
  updateUser(userData: UpdateUserInput!, userId: ObjectId!): User!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Order {
  _id: ObjectId!
  coupon: String
  couponDiscount: Int
  details: [OrderDetails!]!
  orderDate: Date
  owner: User!
  shipAddress: Address!
  shippedDate: Date
}

type OrderDetails {
  discount: Float
  product: Product!
  quantity: Float!
  unitPrice: Float!
}

"""Sets the current status of a order/sale"""
enum OrderStatus {
  CANCELLED
  COMPLETED
  PENDING
  SHIPPED
}

input PriceFilterInput {
  max: Int!
  min: Int!
}

type Product {
  _id: ObjectId!
  category: Category!
  condition: ProductCondition!
  createdAt: Date
  description: String!
  discount: Int
  images: String!
  name: String!
  owner: User!
  price: Float!
  status: ProductStatus
  stock: Int!
  updatedAt: Date
}

"""Sets the product condition"""
enum ProductCondition {
  NEW
  USED_FAIR
  USED_GOOD
  USED_LIKE_NEW
}

input ProductDetailsInput {
  _id: ObjectId!
  discount: Float
  images: String!
  name: String!
  owner: ObjectId!
  price: Float!
}

"""Sets the current status of a product"""
enum ProductStatus {
  """Is in stock and ready for sale"""
  AVAILABLE

  """Product will no longer be sold once inventory is depleted."""
  DISCONTINUED

  """Is temporarily unavailable for sale"""
  NOT_AVAILABLE

  """Product has a special price or discount."""
  ON_PROMOTION

  """Is not available in inventory"""
  OUT_OF_STOCK
}

type Query {
  getCategories: [Category!]!
  getCategoryById(categoryId: ObjectId!): Category!
  getCategoryByName(categoryName: String!): Category!
  getCouponByCode(code: String!): Coupon!
  getCoupons: [Coupon!]!
  getCurrentUser: User
  getOrderById(orderId: ObjectId!): Order!
  getProductById(productId: ObjectId!): Product!
  getProducts(filter: FilterInput, pageNum: Int!, pageSize: Int!, sort: SortInput!): InfiniteScrollProducts!
  getProductsByCategory(categoryId: ObjectId!): [Product!]!
  getProductsByUserId(userId: ObjectId!): [Product!]!
  getRelatedProducts(categoryId: ObjectId!): [Product!]!
  getSaleById(saleId: ObjectId!): Sale!
  getUserById(userId: ObjectId!): User!
  getUserOrders(userId: ObjectId!): [Order!]!
  getUserSales(userId: ObjectId!): [Sale!]!
  getUsers: [User!]!
  validateCoupon(couponCode: String!): Coupon!
}

type Sale {
  _id: ObjectId!
  customer: User!
  details: [OrderDetails!]!
  order: Order!
  orderDate: Date
  owner: User!
  shipAddress: Address!
  status: OrderStatus
}

input SignUpInput {
  email: String!
  fullName: String!
  password: String!
  username: String!
}

input SortInput {
  by: String!
  order: SortOrder!
}

"""
Sort order scalar type that can be either a string ('ASC', 'DESC') or a number (1, -1)
"""
scalar SortOrder

type TokenWithUser {
  token: String!
  user: User!
}

input UpdateCategoryInput {
  description: String
  name: String
  picture: String
}

input UpdateCouponInput {
  code: String
  description: String
  discount: Int
  expirationDate: Date
  invalidCategories: [ObjectId!]
  isPublic: Boolean
  limit: Int
  onlyForOwnerProducts: Boolean
  status: CouponStatus
  validCategories: [ObjectId!]
}

input UpdateProductInput {
  category: ObjectId
  condition: ProductCondition
  description: String
  discount: Float
  images: String
  name: String
  price: Float
  status: ProductStatus
  stock: Float
}

input UpdateSaleStatusInput {
  status: OrderStatus!
}

input UpdateUserInput {
  cart: [CartItemInput!]
  email: String
  fullName: String
  password: String
  username: String
}

type User {
  _id: ObjectId!
  addresses: [Address!]
  cart: [CartItem!]
  email: String!
  fullName: String!
  password: String!
  phone: String
  role: UserRoles
  username: String!
}

enum UserRoles {
  ADMIN
  USER
}